{"Importance_of_shallow_copy_in_useState":"# Importance of shallow copy in useState\r\n\r\nI rencently encounter a problem during a development of website using React.\r\nAn API request was be doing inside a useEffect clause. Whenever a new data is received, it will be append to the state which is an array by a dispatcher.\r\n```\r\nlet [cryptos,setCryptos] = useState([])\r\nuseEffect(()=>{\r\n    async function getData(){\r\n      const [err,res] = await getCryptoTypes()\r\n      if(err) alert(err)\r\n      if(res){\r\n        console.log(res.data.data)\r\n        let cryps = []\r\n        for(let c of res.data.data){\r\n          const [e,r] = await getCrypto(c)\r\n          if(e) console.log(e)\r\n          else{\r\n            cryps.push(r.data.data)\r\n            setCryptos(cryps)\r\n\r\n          }\r\n        }\r\n        cryps.sort((a,b)=>b.market_cap-a.market_cap)\r\n        // setCryptos(cryps)\r\n        \r\n      }\r\n    }\r\n    getData();\r\n  },[])\r\n```\r\nHowever, the page will not be render the data pieace by pieace as expected, it only render one the first pieace of data received.\r\n\r\nDuring debugging, the api request worked well, but the page was only rendered once even though we called setCryptos many times.\r\n\r\nIt is because setCryptos does not neccesarily re-render the page whenever be called. It compare the new state will original one, if not equal it re-renders the page. In this case, we call cryps.push(data) to update this array. However, the array cryps is still the one it was. It is same like\r\n```\r\nlet a=[1]\r\nlet b = a\r\na.push(2)\r\na === b // true\r\n```\r\nReact compare original state with the new state, cryptos === cryps, and find they are the same, so it does not re-render the page.\r\n\r\nIn conclution, we need to create a new copy of the orginal data when calling a dispatcher\r\n```\r\nsetCryptos([...cryps])\r\n```\r\n\r\n","implementation-of-combination-in-recursive-way":"---\ntitle: implementation of combination in recursive way\ndate: 2020-08-14 00:03:19\ntags:\n---\nA recursive way implementing combination\n```\ndef collect(n,arr):\n\tsize = len(arr)\n\tif n == 0:\n\t\treturn []\n\tif n == 1:\n\t\treturn [[i] for i in arr]\n\telse:\n\t\tres  = []\n\t\tfor i in range(0,size):\n\t\t\tcollection = collect(n-1,arr[i+1:])\n\t\t\tfor item in collection:\n\t\t\t\titem.append(arr[i])\n\t\t\tres.extend(collection)\n\t\treturn res\n```\n\n","menu-toggle-display-problem":"---\ntitle: menu toggle play\ndate: 2020-07-20 00:50:26\ntags:\n---\n During developing my video player, I have encountered a very interesting troublesome.\n \n I was about to creating a setting button by clicking which, a menu will pop up. And users can simply click any place to close the menu. The original implementation took use of redux. when the setting button is clicked, an action CLICKONSETTING will be dispatched and the state for controlling display of setting menu will set to be true.\n ```\n export function mouseState(state = {barVisible:false,volumeBarVisible:false,settingVisible:false},action){\n    switch(action.type){\n        case actionType.MOVEOVERVIDEO:{\n            return {...state,barVisible:true}\n        }\n        case actionType.MOVEOUTVIDEO:{\n            return {...state,barVisible:false}\n        }\n        case actionType.CLICKONVIDEO:{\n            return {...state,barVisible:true,settingVisible:false}\n        }\n        case actionType.HOVERONVOLUME:{\n            return {...state,volumeBarVisible:true}\n        }\n        case actionType.LEAVEVOLUME:{\n            return {...state,volumeBarVisible:false}\n        }\n        case actionType.CLICKSETTING:{\n            return {state,settingVisible:!state.settingVisible}\n        }\n        default:{\n            return state\n        }\n    }\n}\n ```\n Three actions \"mousemove\", \"mouseleave\",\"click\" are binded to the playerRef which contains control bar, video and any video player related components. When the player listens the click action, the state for controlling display of menu will set to be false. Another click listener is binded to the setting button, when click on it, the visibility of menu will be toggled.\n\n\n During testing, when I click on the setting button, the menu displayed as expected, and clicking anywhere else can close the menu as expected as well. However, if the menu was open, and when I click the setting button, the menu was not closed.\n\n To find out the reason of this unexpected phenomenon, a console.log was added to the click listener callback function on the setting icon. When click on it, it always logs false indicating the previous state of menu visibility was always false. But why the menu was still displaying there?\n\n By inspecting the reducer again, I found there were only two actions that change the state of menu display. \"CLICKON SETTING\" only toggle the previous state, whilte \"CLICK\" on player will always set the state to be false. I added another console.log on the \"CLICKONSETTING\" action to see if the action was correctly dispatched and the previous state. However, whether the menu was displayed, the state were always falses.\n ```\n {barVisible: true, volumeBarVisible: false, settingVisible: false}\n ```\nIt was kind of weired. After a lot of testings, I confirmed something must happened before the case \"CLICKONSETTING\". But what can it be?\n\nInspecting the reducer again, there could be only one possibility, that was a \"CLICK\" action was also dispatched before the \"CLICKONSETTING\". It came to me that the \"CLICK\" action was binded to the whole player, which also contains the setting button. When I click the setting button, the player also listens to this action and turns settingVisible state to false. And when the action \"CLICKONSETTING\" comes, it toggle the state which was turned from false to true. That is the exact reason why the menu was always there when click the setting button.\n\nA possible solution is to add a mask which has the same size of the player outside the player. And bind the toggle display action to the mask.\n\nProblem end.\n","wave-like-css-effect":"---\ntitle: wave-like css effect\ndate: 2020-06-18 21:52:47\ntags:\n---\nIt is quite common in a lot of html5 players that when clicking on video, an icon would flash in and out with a wave-like animation effect.There are multiple way implementing such kind of effect though, I figured out my own possible way.\n\nCSS code\n```[javascript]\n.playpause{\n  display:none;\n  position: absolute;\n  top:50%;\n  left:50%;\n  height:5.5em;\n  width:5.5em;\n  background-color: rgba(0,0,0,0.6);\n  border-radius: 50%;\n  transform:translate(-50%,-50%);\n  animation: play-pause .3s ease 1;\n}\n@keyframes play-pause {\n  from{transform:translate(-50%,-50%) scale(1) ;}\n  to{transform:translate(-50%,-50%) scale(1.5);opacity: 0;}\n}\n```\nReact content\n```\n<button ref = {buttonRef} className = \"playpause icon\">\n        {\n            playStatus?\n            <svg className=\"bi bi-play-fill\" width=\"3em\" height=\"3em\" viewBox=\"0 0 16 16\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path d=\"M11.596 8.697l-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393z\"/>\n            </svg>:\n            <svg className=\"bi bi-pause-fill\" width=\"3em\" height=\"3em\" viewBox=\"0 0 16 16\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\n            <path d=\"M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5zm5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5z\"/>\n        </svg>\n                }\n        </button>\n```\nonClickListener\n```\nconst buttonRef = useRef(null)\nconst handleClickScreen = ()=>{\n        if(playStatus) dispatch({type:PAUSE})\n        else{dispatch({type:PLAY})}\n        buttonRef.current.style.display = \"block\"\n        setTimeout(()=>buttonRef.current.style.display = \"none\",300)\n\n```\n\nThe process goes when clicking on the video, the icon will be decided by the playing status, if is playing, pause icon will be displayed and video then paused, and vice versa. The icon's display attribute then be set to \"block\", and animation effect goes making the icon scale up from 1 to 1.5 and opacity from 1 to 0 enabled by using keyframe. The process will last for 0.3 second after which the button's diplay attribute will be set to none. \n![](playpause.gif)\n\n \n"}